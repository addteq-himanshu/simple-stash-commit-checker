{namespace se.bjurr}

/**
 * @param config
 * @param errors
 */
{template .sscc}
<div class="sscc">
    <div class="aui-message aui-message-info">
        You can use <a target="_blank" href="http://jex.im/regulex/">http://jex.im/regulex/</a> to fiddle with regular expressions.<br>
        You may want some <a target="_blank" href="http://lmgtfy.com/?q=ascii+art">ASCII art</a> in accept and reject messages.<br>
        You can use variables in messages.<bt>
        <ul>
            <li><b>&#36;&#123;STASH_EMAIL&#125;</b> Email of user in Stash.</li>
            <li><b>&#36;&#123;STASH_NAME&#125;</b> Name of user in Stash.</li>
        </ul>
    </div>

    {call aui.form.textField}
        {param id: 'branches' /}
        {param labelContent: 'Branches' /}
        {param value: $config['branches'] /}
        {param descriptionText: 'Regular expression to match branches that will be checked, leave empty to check all.' /}
        {param errorTexts: $errors ? $errors['branches'] : null /}
    {/call}

    <div class="fieldGroup">
        {call aui.form.textField}
            {param id: 'branchRejectionRegexp' /}
            {param labelContent: 'Check branch name' /}
            {param value: $config['branchRejectionRegexp'] /}
            {param descriptionText: 'Reject if branch name does not match this regexp, leave empty to allow all.' /}
            {param errorTexts: $errors ? $errors['branchRejectionRegexp'] : null /}
        {/call}

        {call aui.form.textareaField}
            {param id: 'branchRejectionRegexpMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['branchRejectionRegexpMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Reject message to show if branch name not matching regular expression.' /}
            {param errorTexts: $errors ? $errors['branchRejectionRegexpMessage'] : null /}
        {/call}
    </div>

    {call aui.form.checkboxField}
        {param legendContent: 'Exclude Merge Commits' /}
        {param fields: [[
            'id' : 'excludeMergeCommits',
            'labelText': stash_i18n('stash.web.stash.enable-ci-radio.button.label', 'Enabled'),
            'isChecked' : $config['excludeMergeCommits']
        ]] /}
        {param descriptionText: 'Exclude merge commits from being checked.' /}
    {/call}
    
    {call aui.form.checkboxField}
        {param legendContent: 'Exclude Tags Commits' /}
        {param fields: [[
            'id' : 'excludeTagCommits',
            'labelText': stash_i18n('stash.web.stash.enable-ci-radio.button.label', 'Enabled'),
            'isChecked' : $config['excludeTagCommits']
        ]] /}
        {param descriptionText: 'Exclude tag commits from being checked.' /}
    {/call}

    {call aui.form.checkboxField}
        {param legendContent: 'Accept service users' /}
        {param fields: [[
            'id' : 'allowServiceUsers',
            'labelText': stash_i18n('stash.web.stash.enable-ci-radio.button.label', 'Enabled'),
            'isChecked' : $config['allowServiceUsers']
        ]] /}
        {param descriptionText: 'Always accept commits from service users.' /}
    {/call}
    
    <div class="fieldGroup">
        {call aui.form.checkboxField}
            {param legendContent: 'Require Matching Author Email' /}
            {param fields: [[
                'id' : 'requireMatchingAuthorEmail',
                'labelText': stash_i18n('stash.web.stash.enable-ci-radio.button.label', 'Enabled'),
                'isChecked' : $config['requireMatchingAuthorEmail']
            ]] /}
            {param descriptionText: 'Require that the commit authors email matches the Stash users email.' /}
        {/call}
    
        {call aui.form.checkboxField}
            {param legendContent: 'Require Matching Committer Email' /}
            {param fields: [[
                'id' : 'requireMatchingCommitterEmail',
                'labelText': stash_i18n('stash.web.stash.enable-ci-radio.button.label', 'Enabled'),
                'isChecked' : $config['requireMatchingCommitterEmail']
            ]] /}
            {param descriptionText: 'Require that committers email matches the Stash users email.' /}
        {/call}
    
        {call aui.form.textareaField}
            {param id: 'requireMatchingAuthorEmailMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['requireMatchingAuthorEmailMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Reject message to show if email not matching authors email. Like: git config --global user.email user@name.com' /}
            {param errorTexts: $errors ? $errors['requireMatchingAuthorEmailMessage'] : null /}
        {/call}
    </div>

    <div class="fieldGroup">
        {call aui.form.checkboxField}
            {param legendContent: 'Require Matching Author Name' /}
            {param fields: [[
                'id' : 'requireMatchingAuthorName',
                'labelText': stash_i18n('stash.web.stash.enable-ci-radio.button.label', 'Enabled'),
                'isChecked' : $config['requireMatchingAuthorName']
            ]] /}
            {param descriptionText: 'Require that the commit authors name matches the Stash users name.' /}
        {/call}
    
        {call aui.form.checkboxField}
            {param legendContent: 'Require Matching Committer Name' /}
            {param fields: [[
                'id' : 'requireMatchingCommitterName',
                'labelText': stash_i18n('stash.web.stash.enable-ci-radio.button.label', 'Enabled'),
                'isChecked' : $config['requireMatchingCommitterName']
            ]] /}
            {param descriptionText: 'Require that committers name matches the Stash users name.' /}
        {/call}
    
        {call aui.form.textareaField}
            {param id: 'requireMatchingAuthorNameMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['requireMatchingAuthorNameMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Reject message to show if author not matching authors name. Like: git config --global user.name "User Name"' /}
            {param errorTexts: $errors ? $errors['requireMatchingAuthorNameMessage'] : null /}
        {/call}
    </div>

    <div class="fieldGroup">
        {call aui.form.textField}
            {param id: 'checkCommitDiffRegexp' /}
            {param labelContent: 'Check commit diff' /}
            {param value: $config['checkCommitDiffRegexp'] /}
            {param descriptionText: 'Reject the commit if its diff does not match the regular expression, leave empty to check all.' /}
            {param errorTexts: $errors ? $errors['checkCommitDiffRegexp'] : null /}
        {/call}

        {call aui.form.textareaField}
            {param id: 'checkCommitDiffRegexpMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['checkCommitDiffRegexpMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Reject message to show if commit diff not matching regular expression.' /}
            {param errorTexts: $errors ? $errors['checkCommitDiffRegexpMessage'] : null /}
        {/call}
    </div>

    <div class="fieldGroup">
        {call aui.form.textField}
            {param id: 'checkCommitSize' /}
            {param labelContent: 'Check commit size (kb)' /}
            {param value: $config['checkCommitSize'] /}
            {param descriptionText: 'Reject the commit if its size is larger then entered.' /}
            {param errorTexts: $errors ? $errors['checkCommitSize'] : null /}
        {/call}

        {call aui.form.textareaField}
            {param id: 'checkCommitSizeMessage' /}
            {param labelContent: 'Reject message' /}
            {param value: $config['checkCommitSizeMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Reject message to show if commit is to large.' /}
            {param errorTexts: $errors ? $errors['checkCommitSizeMessage'] : null /}
        {/call}
    </div>

    <div class="fieldGroup">
        {call aui.form.checkboxField}
            {param legendContent: 'Dry run' /}
            {param fields: [[
                'id' : 'dryRun',
                'labelText': stash_i18n('stash.web.stash.enable-ci-radio.button.label', 'Enabled'),
                'isChecked' : $config['dryRun']
            ]] /}
            {param descriptionText: 'Dry run the plugin. The commits will be validated, and the committer will see the validation result, but the plugin will never actually reject any commit. This can be used when introducing the commit checker, there can be a dry run period of a few days so that committers will have time to learn how to adjust there commits.' /}
        {/call}
    
        {call aui.form.textareaField}
            {param id: 'dryRunMessage' /}
            {param labelContent: 'Dry run message' /}
            {param value: $config['dryRunMessage'] /}
            {param rows: 3 /}
            {param descriptionText: 'Message to append to response, if in dry-run and commits are not successfully validating. This message could, for example, state a date when dry run will be disabled and the committs will actually have to be correct.' /}
            {param errorTexts: $errors ? $errors['dryRunMessage'] : null /}
        {/call}
    </div>

    {call aui.form.textareaField}
        {param id: 'rejectMessage' /}
        {param labelContent: 'Reject message' /}
        {param value: $config['rejectMessage'] /}
        {param rows: 5 /}
        {param descriptionText: 'Message to be shown to committer when push is rejected. Like a link to wiki page explaining how to work with "amend" and "rebase".' /}
        {param errorTexts: $errors ? $errors['rejectMessage'] : null /}
    {/call}

    {call aui.form.textareaField}
        {param id: 'acceptMessage' /}
        {param labelContent: 'Accept message' /}
        {param value: $config['acceptMessage'] /}
        {param rows: 5 /}
        {param descriptionText: 'Message to be shown to committer when push is accepted.' /}
        {param errorTexts: $errors ? $errors['acceptMessage'] : null /}
    {/call}
    
    <h3>Issue validation</h3>
    <div class="issues">
        <div class="left">
            <div class="buttons">
                {call aui.form.input}
                    {param extraClasses: 'newGroup' /}
                    {param value: 'New rule group' /}
                    {param type: 'button' /}
                {/call}
            </div>
        </div>
        <div class="groups">
            {for $i in range(100)}
                {if $config['groupAccept['+$i+']']}
                    {call .group}
                        {param config: $config /}
                        {param errors: $errors /}
                        {param group: $i /}
                    {/call}
                {/if}
            {/for}
        </div>
    </div>
</div>
{/template}

/**
 * @param config
 * @param errors
 * @param group
 */
{template .group}
<div class="group fieldGroup" data-index="{$group}">
    <h4>Group #{$group}</h4>
    <div class="left">
        {call aui.form.input}
            {param extraClasses: 'removeGroup' /}
            {param value: 'Remove group' /}
            {param type: 'button' /}
        {/call}
    </div>
    {call aui.form.radioField}
        {param legendContent: 'Matching commits are' /}
        {param fields: [
          [ 'id' : 'groupAccept['+$group+']',
            'value': 'ACCEPT',
            'labelText': 'Accepted',
            'isChecked' : $config['groupAccept['+$group+']'] == 'ACCEPT'
            ],
          [ 'id' : 'groupAccept['+$group+']',
            'value': 'SHOW_MESSAGE',
            'labelText': 'Dont accept or reject. Just show configured message when any rule matches.',
            'isChecked' : $config['groupAccept['+$group+']'] == 'SHOW_MESSAGE'
            ]
        ] /}
        {param descriptionText: 'Any commit that is not accepted, will be rejected.' /}
    {/call}

    {call aui.form.radioField}
        {param legendContent: 'The group matches a commit if' /}
        {param fields: [
          [ 'id' : 'groupMatch['+$group+']',
            'value': 'ONE',
            'labelText': '1 rule matches',
            'isChecked' : $config['groupMatch['+$group+']'] == 'ONE'
            ],
          [ 'id' : 'groupMatch['+$group+']',
            'value': 'NONE',
            'labelText': 'no rules match',
            'isChecked' : $config['groupMatch['+$group+']'] == 'NONE'
            ],
          [ 'id' : 'groupMatch['+$group+']',
            'value': 'all',
            'labelText': 'all rules match',
            'isChecked' : $config['groupMatch['+$group+']'] == 'all'
            ]
        ] /}
    {/call}
    {call aui.form.textareaField}
        {param id: 'groupMessage['+$group+']' /}
        {param labelContent: 'Message' /}
        {param value: $config['groupMessage['+$group+']'] /}
        {param rows: 2 /}
        {param descriptionText: 'Message to to committer, explaining the group. Like "An issue needs to be specified" or "Dont mention \'fixing review comments\', mention what you actually changed instead."' /}
        {param errorTexts: $errors ? $errors['groupMessage['+$group+']'] : null /}
    {/call}
    <div class="left">
        {call aui.form.input}
            {param extraClasses: 'newRule' /}
            {param value: 'New rule' /}
            {param type: 'button' /}
        {/call}
    </div>
    <div class="rules">
        {for $g in range(100)}
            {for $r in range(100)}
                {if $config['ruleRegexp['+$g+']['+$r+']']}
                    {call .rule}
                        {param config: $config /}
                        {param errors: $errors /}
                        {param group: $g /}
                        {param rule: $r /}
                    {/call}
                {/if}
            {/for}
        {/for}
    </div>
</div>
{/template}

/**
 * @param config
 * @param errors
 * @param group
 * @param rule
 */
{template .rule}
<div class="rule" data-index="{$rule}">
    <h5>Group #{$group}, Rule #{$rule}</h5>
    <div class="buttons">
        {call aui.form.input}
            {param extraClasses: 'removeRule' /}
            {param value: 'Remove rule' /}
            {param type: 'button' /}
        {/call}
    </div>
    {call aui.form.textField}
        {param id: 'ruleRegexp['+$group+']['+$rule+']' /}
        {param value: $config['ruleRegexp['+$group+']['+$rule+']'] /}
        {param descriptionText: 'Regular expression to match commit message. A Jira issue would match "\\b[a-zA-Z]([a-zA-Z]+)-([0-9]+)\\b".' /}
        {param errorTexts: $errors ? $errors['ruleRegexp['+$group+']['+$rule+']'] : null /}
    {/call}
    {call aui.form.textField}
        {param id: 'ruleMessage['+$group+']['+$rule+']' /}
        {param value: $config['ruleMessage['+$group+']['+$rule+']'] /}
        {param descriptionText: 'Message to to committer, explaining the rule. Like "If this is just refactoring or fixing toggling test case, you can always use AB-1234."' /}
        {param errorTexts: $errors ? $errors['ruleMessage['+$group+']['+$rule+']'] : null /}
    {/call}
</div>
{/template}
